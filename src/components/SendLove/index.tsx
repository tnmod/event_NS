import "./SendLove.css";
import { useEffect, useState } from "react";
import ConfettiExplosion from "react-confetti-explosion";
import { toast } from "react-toastify";
import { Modal } from "antd";
import { useRealtimeDB } from "../../utils/firebase.utils.ts";
import { useDeviceContext } from "../../providers/DeviceProvider.tsx";
import { NotiWarning } from "../Warning.tsx";
import ReactPlayer from "react-player";
import {
  convertStringToStar,
  getRateImageName,
  getVideoName,
} from "../../utils/string.utils.ts";
import Lottie from "lottie-react";
import LoadingAnimation from "../../assets/loading.json";
import {images} from "../ImageGallery/images.ts";

const explosionProps = {
  force: 0.8,
  duration: 3000,
  particleCount: 450,
  width: 3000,
};

const celebList = [
  "ƒê√†m Vƒ©nh H∆∞ng.webp",
  "Gavin Casalegno Di·ªÖn vi√™n.jpg",
  "hieu-thu-hai.jpg",
  "Hyun Bin.jpg",
  "isaac.jpg",
  "Joseph Gordon.jpg",
  "Justin Bieber.webp",
  "Lee Min Ho.jpg",
  "L√™ Minh.png",
  "L∆∞u ƒê·ª©c Hoa.jpg",
  "MCK.webp",
  "Mono(1).PNG",
  "MTP.webp",
  "noo-phuoc-thinh.jpg",
  "Shawn Mendes.webp",
  "soobin-hoang-son.jpg",
  "Timoth√©e Chalamet.webp",
  "V - BTS.webp",
];

const man = [
  {
    image: "/avatar/Nh√¢n.jpg",
    name: "Nguy·ªÖn Anh Nh√¢n",
    vid: "/vid_love/Bo.mp4",
  },
  {
    image: "/avatar/LXNgoc.JPG",
    name: "L√™ Xu√¢n Ng·ªçc",
    vid: "/vid_love/L√™ Xu√¢n Ng·ªçc.MOV",
  },
  {
    image: "/avatar/tien.jpg",
    name: "Nguy·ªÖn Duy Ti·∫øn",
    vid: "/vid_love/Duy Tien.mp4",
  },
  {
    image: "/avatar/ngoc.jpg",
    name: "Ph·∫°m ƒê·ª©c Ng·ªçc",
    vid: "/vid_love/Common.mp4",
  },
  {
    image: "/avatar/CA.jpg",
    name: "Cao Th·∫ø Anh",
    vid: "/vid_love/Cao Th·∫ø Anh.MOV",
  },
  {
    image: "/avatar/quyet.JPG",
    name: "Nguy·ªÖn VƒÉn Quy·∫øt",
    vid: "/vid_love/Common.mp4",
  },
  {
    image: "/avatar/D≈©ng.jpg",
    name: "Ho√†ng Ng·ªçc D≈©ng",
    vid: "/vid_love/Ho√†ng D≈©ng.mp4",
    
  },
  {
    image: "/avatar/hieu.JPG",
    name: "Phan Anh Hi·∫øu",
    vid: "/vid_love/Phan H·∫øu.mp4",
  },
  {
    image: "/avatar/ƒê·ª©c-mobile.jpg",
    name: "Nguy·ªÖn Minh ƒê·ª©c",
    vid: "/vid_love/Common.mp4",
  },
  {
    image: "/avatar/phuoc.JPG",
    name: "H·ªì H·ªØu Ph∆∞·ªõc",
    vid: "/vid_love/H·ªì Ph∆∞·ªõc.mp4",
  },
  {
    image: "/avatar/manhtuan.jpg",
    name: "Nguy·ªÖn M·∫°nh Tu·∫•n",
    vid: "/vid_love/Nguy·ªÖn M·∫°nh Tu·∫•n.mp4",
  },
  {
    image: "/avatar/tam.JPG",
    name: "Nguy·ªÖn H·ªØu T√¢m",
    vid: "/vid_love/H·ªØu T√¢m.mp4",
  },
  {
    image: "/avatar/tin.JPG",
    name: "Nguy·ªÖn Ph√∫ T√≠n",
    vid: "/vid_love/Nguyen_Phu_Tin.mp4",
  },
  {
    image: "/avatar/tuananh.jpg",
    name: "Nguy·ªÖn Tu·∫•n Anh",
    vid: "/vid_love/Nguy·ªÖn Tu·∫•n Anh.mov",
  },
  {
    image: "/avatar/quaan hoang.JPG",
    name: "Qu√¢n Ho√†ng",
    vid: "/vid_love/Ho√†ng Qu√¢n.mp4",
  },
  {
    image: "/avatar/duc-be.jpg",
    name: "Nguy·ªÖn VƒÉn ƒê·ª©c",
    vid: "/vid_love/Nguy·ªÖn VƒÉn ƒê·ª©c.mp4",
  },
];

export default function SendLove() {
  const [selectedUser, setSelectedUser] = useState<any>(null);
  const [isCurrentSelected, setIsCurrentSelected] = useState(false);
  const { deviceId, userName } = useDeviceContext();
  const [manList,setManList] = useState(man)
  
  useEffect(() => {
    setManList(man.sort(() => Math.random() - 0.5))
  }, []);
  
  return (
    <div className={"sl-wrapper"}>
      <h1>Trao g·ª≠i y√™u th∆∞∆°ng</h1>
      <p>B·∫°n mu·ªën nh·∫≠n l·ªùi ch√∫c t·ª´ ai nh·ªâ?</p>
      <p>H√£y ‚Äú·∫•n‚Äù v√†o ng∆∞·ªùi m√† b·∫°n mu·ªën nh·∫≠n l·ªùi ch√∫c nh√©</p>
      <div className={"sl-user-boxes"}>
        {manList.map((item, index) => {
          return (
            <div
              onClick={() => {
                if (deviceId.length === 0) {
                  NotiWarning();
                  return;
                } else if (userName.length === 0) {
                  toast("H√£y ƒë·∫∑t t√™n cho m√¨nh tr∆∞·ªõc nh√©", { type: "error" });
                  setTimeout(() => {
                    document.scrollingElement?.scrollTo({
                      top: 0,
                      behavior: "smooth",
                    });
                  }, 500);
                  return;
                }
                setIsCurrentSelected(true);
                setTimeout(() => {
                  setIsCurrentSelected(false);
                  setSelectedUser(item);
                }, 600);
              }}
              className={"sl-user-box"}
            >
              <UserBox
                isCurrentSelected={isCurrentSelected}
                index={index}
                key={index}
                name={item.name}
                age={2}
                image={item.image}
              />
            </div>
          );
        })}
      </div>

      {selectedUser && deviceId.length !== 0 && (
        <VidLuvModal
          vid={selectedUser?.vid}
          open={!!selectedUser}
          onClose={() => setSelectedUser(null)}
          name={selectedUser.name}
        />
      )}
    </div>
  );
}

const UserBox = ({ image, index, isCurrentSelected, rating }: any) => {
  const [isSelected, setIsSelected] = useState(false);
  const { deviceId, userName } = useDeviceContext();
  return (
    <>
      {isSelected ? (
        <img
          className={"animate__animated animate__rubberBand animate__wobble"}
          src={image}
          alt=""
        />
      ) : (
        <img
          style={{ cursor: "pointer" }}
          onClick={() => {
            if (deviceId.length === 0) {
              return;
            } else if (userName.length === 0) {
              return;
            } else if (isCurrentSelected) {
              return;
            }
            setIsSelected(true);
          }}
          src={"/celeb/" + celebList[index]}
          alt=""
        />
      )}
    </>
  );
};

const icon = [
  {
    src: "rate/it-thoi.png",
    alt: "it-thoi",
  },
  {
    src: "rate/kkk.png",
    alt: "kkk",
  },
  {
    src: "rate/i-like-it.png",
    alt: "i-like-it",
  },
  {
    src: "rate/ngon.png",
    alt: "ngon",
  },
  {
    src: "rate/ong-trum.png",
    alt: "ong-trum",
  },
];

interface VidLuvModalProps {
  open?: boolean;
  onClose: () => void;
  vid: string;
  name: string;
  ratingValue?: RatingProps;
}
const VidLuvModal = ({ open, onClose, vid, name }: VidLuvModalProps) => {
  const [pick, setItem] = useState<number>(-1);
  const { rateVideo, getAllRating } = useRealtimeDB();
  const { userName, deviceId } = useDeviceContext();
  const [emoji, setEmoji] = useState<boolean>(true);
  const [rating, setRating] = useState<RatingProps>();
  const { getRating } = useRealtimeDB();
  const [userRating, setUserRating] = useState<rate[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [allRating, setAllRating] = useState<userRating[]>([]);
  const [comment, setComment] = useState<boolean>(false);
  const fetchRating = async () => {
    const res = await getRating(deviceId, (vid && getVideoName(vid)) || "test");
    if (res) {
      setRating(res);
      setItem(res.userRating.id === deviceId ? res.userRating.rating : -1);
    }
    if (loading) setLoading(false);
    getAllRating((vid && getVideoName(vid)) || "test").then((res) => {
      if (res) {
        setAllRating(Object.values(res));
      } else {
        setAllRating([]);
      }
    });
  };
  useEffect(() => {
    fetchRating();
    const interval = setInterval(() => {
      fetchRating();
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    handleEmoji();
  }, [rating]);

  const handleRate = (item: number) => {
    let value = item === pick ? -1 : item;
    setItem(value);
    rateVideo(deviceId, (vid && getVideoName(vid)) || "test", value, userName);
    setEmoji(rating?.total === 1 && value === -1);
    setLoading(true);
  };
  const handleEmoji = () => {
    if (loading) setLoading(false);
    if (!rating) return;
    setUserRating(convertStringToStar(rating.count));
  };

  return (
    <Modal
      centered
      title={`L∆°i ch√∫c t·ª´ ${name} iu d·∫•u ü©∑`}
      open={open}
      onCancel={onClose}
      onOk={onClose}
      width={1000}
    >
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          flexDirection: "column",
          alignItems: "center",
          gap: 24,
          height: 500,
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "row",
            width: "100%",
            gap: 16,
            flex: 1,
            maxHeight: 400,
          }}
        >
          <div
            style={{
              width: "100%",
              minWidth: 500,
              borderWidth: 1,
              borderColor: "#00000030",
              borderStyle: "solid",
              borderRadius: 10,
              overflow: "hidden",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flex: 2,
            }}
          >
            <ReactPlayer
              width={"100%"}
              playing
              url={vid || "/vid_love/file_example_MP4_480_1_5MG.mp4"}
              controls
            />
          </div>
          {
            comment && (
              <div
                style={{
                  display: "flex",
                  borderWidth: 1,
                  borderColor: "#00000030",
                  borderStyle: "solid",
                  borderRadius: 10,
                  height: "100%",
                  flex: 1,
                }}
              >
                <div
                  style={{
                    overflowY: "auto",
                    padding: "0px 12px",
                    width: "100%",
                  }}
                >
                  {allRating.length > 0 ? (
                    allRating.map((item, index) => {
                      return (
                        <div
                          key={index}
                          style={{
                            display: "flex",
                            justifyContent: "space-between",
                            padding: "8px 0",
                            borderBottom: "1px solid #e8e8e8",
                            alignItems: "center",
                          }}
                        >
                          <p>{item.username}</p>
                          <img
                            src={getRateImageName({ number: item.rating })}
                            alt={getRateImageName({ number: item.rating })}
                            style={{
                              width: "50px",
                              height: "50px",
                              marginRight: 8,
                              backgroundColor: "white",
                              borderRadius: "100%",
                              borderWidth: 0.5,
                              borderColor: "#00000030",
                              borderStyle: "solid",
                              padding: "4px",
                            }}
                          />
                        </div>
                      );
                    })
                  ) : (
                    <div
                      style={{
                        padding: "12px 0",
                      }}
                    >
                      <div
                        style={{
                          display: "flex",
                          flexDirection: "column",
                          alignItems: "center",
                          padding: "20px",
                          background: "#f0f0f0",
                        }}
                      >
                        <p
                          style={{
                            fontSize: "18px",
                            lineHeight: "1.5",
                            color: "#333",
                            marginBottom: "15px",
                          }}
                        >
                          C√°c Lady th√¢n m·∫øn,
                          <br />
                          Ch√∫c m·ª´ng ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ 8/3! H√¥m nay, ch√∫ng ta c√≥
                          m·ªôt ƒëi·ªÅu ƒë·∫∑c bi·ªát t·ª´ {name}, m·ªôt ƒëo·∫°n video √Ω nghƒ©a d√†nh
                          ri√™ng cho t·∫•t c·∫£ c√°c Lady tuy·ªát v·ªùi c·ªßa North Studio. B·∫°n
                          nam c·ªßa ch√∫ng ta ƒë√£ d√†nh r·∫•t nhi·ªÅu t√¢m huy·∫øt ƒë·ªÉ th·ª±c hi·ªán
                          ƒëo·∫°n video n√†y, v√† ch·∫Øc ch·∫Øn ƒë√¢y l√† m·ªôt m√≥n qu√† √Ω nghƒ©a m√†
                          ch√∫ng ta s·∫Ω nh·ªõ m√£i.
                          <br />
                          H√£y th·ªÉ hi·ªán c·∫£m x√∫c c·ªßa b·∫°n b·∫±ng c√°ch th·∫£ react b√™n d∆∞·ªõi
                          video n√†y. M·ªói bi·ªÉu t∆∞·ª£ng "react" nh·ªè b√© c≈©ng ch√≠nh l√† m·ªôt
                          ƒë·ªông l·ª±c l·ªõn lao ƒë·∫øn tr√°i tim c√°c ch√†ng trai b√© nh·ªè c·ªßa
                          ch√∫ng ta. H·ªç c√≥ √Ω ƒë·ªãnh truy·ªÅn ƒë·∫°t t√¨nh c·∫£m ch√¢n th√†nh v√†
                          t√¥n tr·ªçng s√¢u s·∫Øc ƒë·ªëi v·ªõi c√°c Lady tuy·ªát v·ªùi nh·∫•t.
                          <br />
                          D√π {name} c√≥ th·ªÉ c√≥ nh·ªØng l·ªùi n√≥i v√† c·ª≠ ch·ªâ v·ª•ng v·ªÅ, nh∆∞ng
                          ƒëi·ªÅu quan tr·ªçng l√† s·ª± ch√¢n th√†nh v√† t√¢m huy·∫øt ƒë·∫±ng sau m·ªói
                          h√†nh ƒë·ªông. Video n√†y l√† m·ªôt c√°ch √Ω nghƒ©a ƒë·ªÉ th·ªÉ hi·ªán l√≤ng
                          bi·∫øt ∆°n v√† t√¥n tr·ªçng ƒë·ªëi v·ªõi s·ª± ƒë√≥ng g√≥p c·ªßa c√°c Lady
                          trong c√¥ng ty ch√∫ng ta.
                          <br />
                          Ch√∫ng ta l√† m·ªôt gia ƒë√¨nh, v√† m·ªói th√†nh vi√™n ƒë·ªÅu quan
                          tr·ªçng. H√£y c√πng nhau chia s·∫ª ni·ªÅm vui v√† t·∫°o ra nh·ªØng k·ª∑
                          ni·ªám ƒë√°ng nh·ªõ trong ng√†y ƒë·∫∑c bi·ªát n√†y. C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£
                          l√†m cho kh√¥ng kh√≠ t·∫°i North Studio tr·ªü n√™n ·∫•m √°p v√† tr√†n
                          ƒë·∫ßy t√¨nh c·∫£m.
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )
          }
        </div>
        {!loading ? (
          emoji ? (
            <div
              style={{
                display: "flex",
                width: "100%",
                height: "50px",
              }}
            >
              {icon.map(({ alt, src }, index) => {
                return (
                  <button
                    onClick={() => handleRate(index)}
                    key={index}
                    className="rating"
                    style={{
                      outline: "none",
                      border: "none",
                      background: "none",
                    }}
                  >
                    {pick === index ? (
                      <img
                        alt={alt}
                        src={src}
                        style={{
                          width: "50px",
                          height: "50px",
                          scale: "1.4",
                          translate: "0px -15px",
                        }}
                      />
                    ) : (
                      <img
                        alt={alt}
                        src={src}
                        style={{
                          width: "50px",
                          height: "50px",
                        }}
                      />
                    )}
                  </button>
                );
              })}
            </div>
          ) : (
            <button
              onClick={() => setEmoji(true)}
              style={{
                display: "flex",
                width: "100%",
                borderWidth: 0,
                flexDirection: "row",
                alignItems: "center",
                padding: "0px 12px",
                backgroundColor: "white",
                height: "50px",
              }}
            >
              {userRating.length > 0 && (
                <p
                  style={{
                    margin: 0,
                    padding: 0,
                    fontSize: 24,
                    fontWeight: "bold",
                    marginRight: 16,
                  }}
                >
                  {rating?.total}
                </p>
              )}
              {rating && (
                <div
                  style={{
                    display: "flex",
                  }}
                >
                  {userRating.map((item, index) => {
                    return (
                      <img
                        key={index}
                        src={getRateImageName({ name: item })}
                        alt={getRateImageName({ name: item })}
                        style={{
                          width: "50px",
                          height: "50px",
                          marginRight: 8,
                          translate: `-${index * 25}px 0px`,
                          backgroundColor: "white",
                          borderRadius: "100%",
                          borderWidth: 0.5,
                          borderColor: "#00000030",
                          borderStyle: "solid",
                          padding: "4px",
                        }}
                      />
                    );
                  })}
                  {userRating.length > 0 && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setComment(!comment);
                      }}
                      style={{
                        width: "50px",
                        height: "50px",
                        marginRight: 8,
                        translate: `-${userRating.length * 25}px 0px`,
                        backgroundColor: "white",
                        borderRadius: "100%",
                        borderWidth: 0.5,
                        borderColor: "#00000030",
                        borderStyle: "solid",
                        padding: "4px",
                        display: "flex",
                        flexDirection: "row",
                        justifyContent: "center",
                        alignItems: "center",
                        gap: 3,
                      }}
                    >
                      <div
                        style={{
                          width: 5,
                          height: 5,
                          borderRadius: "100%",
                          backgroundColor: "black",
                        }}
                      />
                      <div
                        style={{
                          width: 5,
                          height: 5,
                          borderRadius: "100%",
                          backgroundColor: "black",
                        }}
                      />
                      <div
                        style={{
                          width: 5,
                          height: 5,
                          borderRadius: "100%",
                          backgroundColor: "black",
                        }}
                      />
                    </button>
                  )}
                </div>
              )}
            </button>
          )
        ) : (
          <div
            style={{
              width: "100%",
              height: 50,
            }}
          >
            <div
              style={{
                width: 50,
                height: 50,
              }}
            >
              <Lottie animationData={LoadingAnimation} loop={true} />
            </div>
          </div>
        )}
      </div>
    </Modal>
  );
};
